#!/bin/bash
#
# Script run on the dockerd host to start the E2E Container.
set -xv

function printLicense {
  cat <<-"EOF"
Copyright © 2012-2017 Raytheon BBN Technologies, Inc.
Cambridge, MA USA
All rights reserved.

This program and associated material contains information whose export or 
disclosure to Non-U.S. Persons, wherever located, is subject to the Export 
Administration Regulations (EAR) (15 C.F.R. §730-774). Specifically,
Raytheon BBN Technologies conducted an internal review and determined that this 
information is export controlled as EAR99. Exports contrary to U.S. law are
prohibited.

-------------------------------------------------------------------------------

EOF

function help {
  ( >&2 echo "$1 <e2e_config file> <input_directory> <num_partitions> <num_executors>")
  exit $2
}

function check_config_dir {
  if [ ! -d $1 ] ; then
    ( >&2 echo "ERROR: Configuration Directory $1 does not exist or is not a directory")
    logger -p user.error "ERROR: Configuration Directory $1 does not exist or is not a directory"
    exit 1
  fi
}

function errexit {
   ( >&2 echo "$1")
   logger -p user.error "$1"
   exit 1
}

if [ $# -eq 0 -o "$1" = "-h" -o "$1" = "--help" ]; then
  help $0 0
fi
if [ $# -ne 4 ]; then
  ( >&2 echo "ERROR: incorrect number of parameters")
  help $0 1
fi

UI=" -e LOCAL_USER_ID=$(id -u)"
UN=" -e LOCAL_USER_NAME=$(id -un)"
GI=" -e LOCAL_GROUP_ID=$(id -g)"
GN=" -e LOCAL_GROUP_NAME=$(id -gn)"
unset OCONF
if [ "${CONF}" ] ; then
  CONF=$(readlink -f ${CONF})
  check_config_dir ${CONF}
else
  CONF=$(readlink -f ${HOME}/e2e)
  [ ! -d ${CONF} ] && CONF=$(readlink -f /etc/e2e)
  if [ ! -d ${CONF} -o ! -r ${CONF}] ; then
    ( errexit "ERROR: Configuration Directories \"${HOME}/e2e\" and \"/etc/e2e\" do not exist, are not directories, or are not readable")
  fi
fi
if [ ! -d ${CONF}/hadoop -o ! -r ${CONF}/hadoop ] ; then
  errexit "ERROR: Hadoop Configuration Directory \"${CONF}/hadoop\" does not exist, is not a directory, or is not readable"
fi
if [ ! -d ${CONF}/spark -o ! -r ${CONF}/spark ] ; then
  errexit "ERROR: Spark Configuration Directory \"${CONF}/spark\" does not exist, is not a directory, or is not readable"
fi
if [ ! -f ${CONF}/site_config -o ! -r ${CONF}/site_config ] ; then
  errexit "ERROR: E2E Site Configuration File \"${CONF}/site_config\" does not exist, is not a file, or is not readable"
fi
# $1 e2e config file
if [ ! -f ${1} -o ! -r ${1} ] ; then
  errexit "ERROR: E2E Configuration File \"${1}\" does not exist, is not a file, or is not readable"
fi
e2e_config=$(readlink -f ${1}) # convert to absolute path name
# $2 input data directory
if [ ! -d ${2} -o ! -r ${2} ] ; then
  errexit "ERROR: E2E Input Data Directory \"${2}\" does not exist, is not a directory, or is not readable"
fi
# $3 partitions
if ! [[ ${3} =~ ^[0-9]+$ ]] ; then
  errexit "ERROR: number of partitions value \"${3}\" is not an integer value"
fi
# $4 executors
if ! [[ ${4} =~ ^[0-9]+$ ]] ; then
  errexit "ERROR: number of executors value \"${4}\" is not an integer value"
fi

source ${CONF}/site_config
[ "${shared_top}" ] || errexit "ERROR: the \"shared_top\" variable is not defined in the \"${CONF}/site_config\" file"
if [ ! -d ${shared_top} -o ! -r ${shared_top} ] ; then
  errexit "ERROR: The E2E Shared Directory \"${shared_top}\" does not exist, is not a directory, or is not readable"
fi
shared_top=$(readlink -f ${shared_top})
unset V1 V2 V3 V4 V5 V6 P1
V1=" -v ${CONF}:/conf"
V2=" -v ${shared_top}:/sharedData"
V3=" -v $(readlink -f ${1}):/e2e_config"
V4=" -v $(readlink -f ${2}):/input"
V5=" -v ${CONF}/site_config:/var/lib/adept-e2e/etc/site_config"
V6=" -v $(readlink -f ${PWD}):/output"
P1=" -p :4040"
unset E1 E2 E3
[ "${deploymode}" ] && E1="-e deploymode=${deploymode}"
[ "${master}" ] && E2="-e master=${master}"
E3="-e shared_top=${shared_top}"

if [ \( ! "$DOCKER_CERT_PATH" -o ! "$DOCKER_HOST" -o ! "$DOCKER_TLS_VERIFY" \) -a \( $(id -u) -ne 0 \) ] ; then
  SUDO="sudo "
else
  unset SUDO
fi
# Have to do this here as the container does not mount shared file systems directly
for e2e_config_attribute in "metadata_host" "metadata_port" "metadata_db" "metadata_user_name" "metadata_password" "corpus_id" "kb_report_output_dir" "gather_statistics" "stats_file_path"; do
	attribute_value="$(python -c "import re; print re.compile(\"<entry key=\\\"${e2e_config_attribute}\\\">(.*?)</entry>\").findall(open(\"${1}\").read())[0]")"
	declare "${e2e_config_attribute}"="${attribute_value}"
done
if [ "${kb_report_output_dir}" ]; then
  mkdir -p "${kb_report_output_dir}/${corpus_id}"
fi
if [[ "${gather_statistics}" == "true" ]]; then
  if [ ! -f "${stats_file_path}" ]; then
    touch "${stats_file_path}"
  fi
  chmod 777 "${stats_file_path}"
fi
find "${kb_report_output_dir}" -type d -exec chmod 777 {} \;
# print the license
printLicense
# Next Phase - start the container and continue processing
${SUDO}docker run -it $UI $UN $GI $GN $E1 $E2 $E3 $V1 $V2 $V3 $V4 $V5 $V6 $P1 deft/e2e e2e.sh $2 $3 $4

