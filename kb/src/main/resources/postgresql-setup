#!/bin/bash
set -e

#
# postgresql-setup - Initialization and upgrade operations for PostgreSQL

PGENGINE=/usr/pgsql-9.6/bin

SERVICE_NAME=postgresql

PGTOP=${PGTOP:-"/var/lib/data/pgsql"}
PGDATA=${PGDATA:-"$PGTOP/data"}
PGPORT="5432"

# Log file for initdb
PGLOG="$PGTOP/initdb.log"

export PGDATA PGPORT PGENGINE PGTOP PGLOG

script_result=0

file_env() {
	local var="$1"
	local fileVar="${var}_FILE"
	local def="${2:-}"
	if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
		echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
		exit 1
	fi
	local val="$def"
	if [ "${!var:-}" ]; then
		val="${!var}"
	elif [ "${!fileVar:-}" ]; then
		val="$(< "${!fileVar}")"
	fi
	export "$var"="$val"
	unset "$fileVar"
}

perform_initdb(){
    if [ ! -e "$PGTOP" ]; then
        sudo -u postgres mkdir -p "$PGTOP"
        sudo -u postgres chmod 775 "$PGTOP"
    fi
    if [ ! -e "$PGDATA" ]; then
        sudo -u postgres -g postgres mkdir -p "$PGDATA" || return 1
        sudo -u postgres -g postgres chmod 775 "$PGDATA"
    fi

    # Create the initdb log file if needed
    if [ ! -e "$PGLOG" -a ! -h "$PGLOG" ]; then
        sudo -u postgres -g postgres touch "$PGLOG" || return 1
        sudo -u postgres -g postgres chmod 644 "$PGLOG"
    fi

    if [ ! -e "/run/postgresql" ]; then
        mkdir -p "/run/postgresql"
        chown postgres:postgres "/run/postgresql"
        chmod 755 "/run/postgresql"
    fi

    # Create directory for postmaster log files
    if [ ! -e "$PGLOG" -a ! -h "$PGLOG" ]; then
        sudo -u postgres -g postgres mkdir -p "$PGDATA/pg_log"
        sudo -u postgres -g postgres chmod 774 "$PGDATA/pg_log"
    fi

    # Initialize the database
    cat >/tmp/s1 <<SUDO
$PGENGINE/initdb --pgdata=$PGDATA >> $PGLOG 2>&1 < /dev/null
SUDO
    chmod +x /tmp/s1
    su -l postgres -s /bin/bash -c /tmp/s1

    mv /postgresql.conf "$PGDATA"
    chown postgres:postgres "$PGDATA/postgresql.conf"
    chmod 744 "$PGDATA/postgresql.conf"

    file_env 'POSTGRES_PASSWORD'
    if [ "$POSTGRES_PASSWORD" ]; then
        pass="PASSWORD '$POSTGRES_PASSWORD'"
        authMethod=md5
    else
        cat >&2 <<-'EOWARN'
		****************************************************
		WARNING: No password has been set for the database.
		         This will allow anyone with access to the
		         PostgreSQL port to access your database. In
		         Docker's default configuration, this is 
		         effectively any other container on the same
		         system.

		         Use "-e POSTGRES_PASSWORD=<password> in the
		         "docker run" command used to create this
		         container to set a password for the 
		         database administrator.
		****************************************************

	EOWARN
        pass=
        authMethod=trust
    fi

    {
        echo
        echo "host all all all $authMethod"
    } >> "$PGDATA/pg_hba.conf"

    cat >/tmp/s2 <<SUDO
PGUSER=${PGUSER:-postgres} $PGENGINE/pg_ctl -D $PGDATA -o "-c listen_addresses='localhost'" -w start
SUDO
    chmod +x /tmp/s2
    su -l postgres -s /bin/bash -c /tmp/s2

    file_env 'POSTGRES_USER' 'postgres'
    file_env 'POSTGRES_DB' "$POSTGRES_USER"

    psql=( $PGENGINE/psql -v ON_ERROR_STOP=1 )
    if [ "$POSTGRES_DB" != 'postgres' ]; then
        cat >/tmp/s3 <<SUDO
echo "CREATE DATABASE $POSTGRES_DB\;" | ${psql[@]} --username postgres
echo
SUDO
        chmod +x /tmp/s3
        su -l postgres -s /bin/bash -c /tmp/s3
    fi

    if [ "$POSTGRES_USER" = 'postgres' ]; then
        op='ALTER'
    else
        op='CREATE'
    fi
    cat >/tmp/s4 <<SUDO
echo "$op USER "$POSTGRES_USER" WITH SUPERUSER $pass \;" | ${psql[@]} --username postgres 
echo
SUDO
    chmod +x /tmp/s4
    su -l postgres -s /bin/bash -c /tmp/s4

    psql+=( --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" )

    echo

    cat >/tmp/s5 <<SUDO
PGUSER=${PGUSER:-postgres} $PGENGINE/pg_ctl -D $PGDATA -m fast -w stop
echo
SUDO
    chmod +x /tmp/s5
    su -l postgres -s /bin/bash -c /tmp/s5

    echo 'PostgreSQL init process complete; ready for start up.'
    echo

    if [ -f "$PGDATA/PG_VERSION" ]; then
        return 0
    fi
    return 1
}

initdb(){
    if [ -f "$PGDATA/PG_VERSION" ]; then
        echo "Data directory is not empty!"
        echo
        script_result=1
    else
        echo -n "Initializing database ... "
        if perform_initdb; then
            echo "OK"
        else
            echo "failed, see $PGLOG"
            script_result=1
        fi
        echo
    fi
}

initdb

exit $script_result

