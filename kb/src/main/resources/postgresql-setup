#!/bin/bash
set -e

#
# postgresql-setup - Initialization and upgrade operations for PostgreSQL

PGENGINE=/usr/pgsql-9.6/bin

SERVICE_NAME=postgresql

VARTOP=/var/lib/data
PGTOP=${PGTOP:-"${VARTOP}/pgsql"}
PGDATA=${PGDATA:-"$PGTOP/data"}
PGPORT="5432"

# Log file for initdb
PGLOG="$PGTOP/initdb.log"

export PGDATA PGPORT PGENGINE PGTOP PGLOG

script_result=0

if [ ! -e "${VARTOP}" ]; then
  echo "ERROR: \"${VARTOP}\" does not exist"
  exit 1
fi
if [ ! -d "${VARTOP}" ]; then
  echo "ERROR: \"${VARTOP}\" is not a directory"
  exit 1
fi
if [ ! -r "${VARTOP}" ]; then
  echo "ERROR: \"${VARTOP}\" is not readable"
  exit 1
fi
if [ ! -w "${VARTOP}" ]; then
  echo "ERROR: \"${VARTOP}\" is not writable"
  exit 1
fi

file_env() {
	local var="$1"
	local fileVar="${var}_FILE"
	local def="${2:-}"
	if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
		echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
		exit 1
	fi
	local val="$def"
	if [ "${!var:-}" ]; then
		val="${!var}"
	elif [ "${!fileVar:-}" ]; then
		val="$(< "${!fileVar}")"
	fi
	export "$var"="$val"
	unset "$fileVar"
}

perform_initdb(){
    if [ ! -e "/var/run/postgresql" ]; then
        mkdir -p "/var/run/postgresql"
        chmod 755 "/var/run/postgresql"
    fi

    file_env 'POSTGRES_PASSWORD'
    file_env 'POSTGRES_USER' 'postgres'
    file_env 'POSTGRES_DB' "$POSTGRES_USER"

    if [ ! -e "$PGTOP" ]; then
        sudo -u postgres mkdir -p "$PGTOP"
        sudo -u postgres chmod 775 "$PGTOP"
    fi
    if [ ! -e "$PGDATA" ]; then
        sudo -u postgres mkdir -p "$PGDATA" || return 1
        sudo -u postgres chmod 775 "$PGDATA"
    fi

    # Create the initdb log file if needed
    if [ ! -e "$PGLOG" -a ! -h "$PGLOG" ]; then
        sudo -u postgres touch "$PGLOG" || return 1
        sudo -u postgres chmod 644 "$PGLOG"
    fi

    # Create directory for postmaster log files
    if [ ! -e "$PGLOG" -a ! -h "$PGLOG" ]; then
        sudo -u postgres mkdir -p "$PGDATA/pg_log"
        sudo -u postgres chmod 774 "$PGDATA/pg_log"
    fi

    # Initialize the database
    sudo -u postgres bash <<SUDO
$PGENGINE/initdb --pgdata=$PGDATA >>$PGLOG 2>&1 < /dev/null
SUDO

    sudo -u postgres cp /postgresql.conf "$PGDATA"
    sudo -u postgres chmod 744 "$PGDATA/postgresql.conf"

    if [ "$POSTGRES_PASSWORD" ]; then
        pass="PASSWORD '$POSTGRES_PASSWORD'"
        authMethod=md5
    else
        cat >&2 <<-'EOWARN'
		****************************************************
		WARNING: No password has been set for the database.
		         This will allow anyone with access to the
		         PostgreSQL port to access your database. In
		         Docker's default configuration, this is 
		         effectively any other container on the same
		         system.

		         Use "-e POSTGRES_PASSWORD=<password> in the
		         "docker run" command used to create this
		         container to set a password for the 
		         database administrator.
		****************************************************

	EOWARN
        pass=
        authMethod=trust
    fi

    sudo -u postgres sed -i "$ a\host all all all $authMethod" "$PGDATA/pg_hba.conf" 
    sudo -u postgres tail "$PGDATA/pg_hba.conf"

    sudo -u postgres bash <<SUDO
PGUSER=${PGUSER:-postgres} $PGENGINE/pg_ctl -D $PGDATA -o "-c listen_addresses='localhost'" -w start
SUDO

    psql=( $PGENGINE/psql -v ON_ERROR_STOP=1 )
    if [ "$POSTGRES_DB" != 'postgres' ]; then
        ${psql[@]} --username postgres <<-PSQL
CREATE DATABASE $POSTGRES_DB;
PSQL
    fi

    if [ "$POSTGRES_USER" = 'postgres' ]; then
        op='ALTER'
    else
        op='CREATE'
    fi
    ${psql[@]} --username postgres <<-PSQL
$op USER "$POSTGRES_USER" WITH SUPERUSER $pass;
PSQL

    psql+=( --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" )

    sudo -u postgres bash <<SUDO
PGUSER=${PGUSER:-postgres} $PGENGINE/pg_ctl -D $PGDATA -m fast -w stop
SUDO

    echo 'PostgreSQL init process complete; ready for start up.'

    foo=/tmp/t$$
    touch $foo
    chmod 777 $foo
    trap "rm -f $foo" EXIT
    sudo -u postgres bash <<SUDO
if [ -f "$PGDATA/PG_VERSION" ]; then
    echo 0 >$foo
else
    echo 1 >$foo
fi
SUDO
    return `cat $foo`
}

initdb(){
    if [ -f "$PGDATA/PG_VERSION" ]; then
        echo "Data directory is not empty!"
        echo
        script_result=1
    else
        echo -n "Initializing database ... "
        if perform_initdb; then
            echo "OK"
        else
            echo "failed, see $PGLOG"
            script_result=1
        fi
        echo
    fi
}

if [ -z "$POSTGRES_PASSWORD" -a ! -f ~/.pgpass ]; then
  POSTGRES_PASSWORD_FILE=~/.pgpass
  export POSTGRES_PASSWORD_FILE
  openssl rand -base64 16 >$POSTGRES_PASSWORD_FILE
  chmod 400 $POSTGRES_PASSWORD_FILE
fi

initdb

exit $script_result

