<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.bbn.adept</groupId>
    <artifactId>deft-docker</artifactId>
    <version>2.7.7-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <artifactId>kb</artifactId>
  <name>kb</name>
  <packaging>pom</packaging>
  <description>
  Create a Docker image of the Knowledge Broker in a docker repository. A 
  Knowledge Broker consists of a PostgreSQL server and Parliament server. 
  If no docker environment variables are set, then this will try to use a dockerd
  on the local host. If DOCKER_HOST is set, this will use the dockerd on the
  indicated host. 
  In the install phase, just leaves the docker image in the repository.
  In the deploy phase, downloads the image to a file, compresses it, and generates
  a sha256um over the compressed file.
  Also creates a utilities archive containing the runkb command and its
  documentation.
  </description>
  <properties>
    <parliament-version>2.7.10</parliament-version>
    <maven.build.timestamp.format>yyMMdd-HHmmss-SSSS</maven.build.timestamp.format>
    <timestamp>${maven.build.timestamp}</timestamp>
    <jar.skipIfEmpty>true</jar.skipIfEmpty>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.bbn</groupId>
      <artifactId>parliamentQS</artifactId>
      <version>${parliament-version}</version>
      <type>zip</type>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>process-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/resources</directory>
                  <filtering>true</filtering>
                  <excludes>
                    <include>runkb</include>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>process-runkb</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/resources</directory>
                  <filtering>true</filtering>
                  <includes>
                    <include>runkb</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-parliament-zip</id>
            <phase>process-sources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>com.bbn</groupId>
                  <artifactId>parliamentQS</artifactId>
                  <version>${parliament-version}</version>
                  <type>zip</type>
                  <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                </artifactItem>
              </artifactItems>
              <stripVersion>true</stripVersion>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>development</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>save-image</id>
                <phase>package</phase>
                <goals>
                  <goal>save</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>xz-image</id>
                <phase>package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <executable>xz</executable>
                  <arguments>
                    <argument>-z</argument>
                    <argument>${user.name}_${project.artifactId}.${timestamp}.tar</argument> 
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>sha256sum-image</id>
                <phase>package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <executable>sha256sum</executable>
                  <arguments>
                    <argument>-b</argument>
                    <argument>${user.name}_${project.artifactId}.${timestamp}.tar.xz</argument>
                  </arguments>
                  <outputFile>${project.build.directory}/${user.name}_${project.artifactId}.${timestamp}.tar.xz.sha256sum</outputFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
