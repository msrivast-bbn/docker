<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.bbn.adept</groupId>
    <artifactId>deft-docker</artifactId>
    <version>2.7.7-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  <artifactId>a2kd</artifactId>
  <name>a2kd</name>
  <packaging>pom</packaging>
  <description>
  Create a Docker image of the Adept E2E system in a docker repository. If no
  docker environment variables are set, then this will try to use a dockerd
  on the local host. If DOCKER_HOST is set, this will use the dockerd on the
  indicated host.
  In the install phase, just leaves the docker image in the repository.
  In the deploy phase, downloads the image to a file, compresses it, and generates
  a sha256um over the compressed file.
  Also creates a utilities archive containing the runa2kd command, templates for the
  configuration files used to run it and its documentation.
  </description>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.build.timestamp.format>yyMMdd-HHmmss-SSSS</maven.build.timestamp.format>
    <timestamp>${maven.build.timestamp}</timestamp>
    <jar.skipIfEmpty>true</jar.skipIfEmpty>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.bbn.adept</groupId>
      <artifactId>adept-e2e</artifactId>
      <version>2.7.7</version>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>com.bbn.adept</groupId>
      <artifactId>adept-kb</artifactId>
      <version>2.7.7</version>
      <type>jar</type>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>process-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>resources</goal>
            </goals>
            <configuration>
              <directory>${basedir}/src/main/resources</directory>
              <filtering>true</filtering>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-adept_e2e</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>com.bbn.adept</groupId>
                  <artifactId>adept-e2e</artifactId>
                  <type>jar</type>
                  <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                </artifactItem>
              </artifactItems>
              <stripVersion>true</stripVersion>
            </configuration>
          </execution>
          <execution>
            <id>extract_config_templates</id>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>com.bbn.adept</groupId>
                  <artifactId>adept-e2e</artifactId>
                  <type>jar</type>
                  <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                  <includes>/e2e_config.template.xml,/adept/utilities/DEFT KB create schema.txt</includes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <!-- The downloads for these started to become unreliable, so we 
            are locally 'caching' them. The source for each file is shown with it. We 
            used a wget early in the dockerfile run to download each before manipulating 
            them later to install them appropriately See https://github.com/tianon/gosu/blob/master/INSTALL.md 
            for a good method of downloading and verifying the packages from within the 
            Dockerfile. It would be good to store the files in a local web site or Nexus 
            raw repository to keep demands on the source servers down and help ensure 
            continued access... -->
          <execution>
            <id>copy-repo</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <executable>cp</executable>
              <arguments>
                <!-- https://archive.apache.org/dist/spark/spark-2.0.0/spark-2.0.0-bin-hadoop2.7.tgz -->
                <argument>/nfs/mercury-09/u28/jgriffit/repo/spark-2.0.0-bin-hadoop2.6.tgz</argument>
                <!-- https://github.com/tianon/gosu/releases/download/1.10/gosu-amd64 -->
                <argument>/nfs/mercury-09/u28/jgriffit/repo/gosu-amd64</argument>
                <argument>${project.build.outputDirectory}</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>development</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build-image</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
              <execution>
                <id>save-image</id>
                <phase>package</phase>
                <goals>
                  <goal>save</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>xz-image</id>
                <phase>package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <executable>xz</executable>
                  <arguments>
                    <argument>-z</argument>
                    <argument>${user.name}_${project.artifactId}.${timestamp}.tar</argument> 
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>sha256sum-image</id>
                <phase>package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <workingDirectory>${project.build.directory}</workingDirectory>
                  <executable>sha256sum</executable>
                  <arguments>
                    <argument>-b</argument>
                    <argument>${user.name}_${project.artifactId}.${timestamp}.tar.xz</argument>
                  </arguments>
                  <outputFile>${project.build.directory}/${user.name}_${project.artifactId}.${timestamp}.tar.xz.sha256sum</outputFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
